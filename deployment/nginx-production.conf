# Limitless Infotech Production Nginx Configuration

# Upstream to forward requests to the Next.js Docker container
upstream nextjs_app {
    # Replace with the name of your Next.js service in docker-compose.yml
    # If running directly on host, use localhost:3000
    server limitless-webapp:3000; # Assuming 'limitless-webapp' is your service name in docker-compose
    keepalive 64;
}

server {
    listen 80;
    server_name your_domain.com www.your_domain.com; # Replace with your actual domain(s)

    # Redirect HTTP to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    server_name your_domain.com www.your_domain.com; # Replace with your actual domain(s)

    # SSL configuration
    # Replace with paths to your actual SSL certificate and key
    ssl_certificate /etc/nginx/ssl/your_domain.com.crt;
    ssl_certificate_key /etc/nginx/ssl/your_domain.com.key;

    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers on;

    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: blob:; font-src 'self'; connect-src 'self' https://*.supabase.co wss://*.supabase.co; frame-ancestors 'none';";

    # Root directory for static files (e.g., public folder in Next.js)
    # This should point to where your Next.js 'public' directory content is served
    # If using Docker, ensure these are volume mounted or copied into the Nginx container
    root /var/www/limitless-webapp/public; # Adjust if your static files are served differently

    # Serve static files directly
    location /_next/static {
        alias /var/www/limitless-webapp/.next/static; # Path to Next.js static assets
        expires 1y;
        access_log off;
        add_header Cache-Control "public, immutable";
    }

    location / {
        # Try to serve static files first, then pass to Next.js app
        try_files $uri $uri/ @nextjs_proxy;
    }

    location @nextjs_proxy {
        # Proxy requests to the Next.js application
        proxy_pass http://nextjs_app;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_no_cache $http_pragma $http_authorization;
        proxy_redirect off;
    }

    # Optional: Serve specific static assets from the public folder
    location ~* \.(jpg|jpeg|gif|png|ico|css|js|woff|woff2|ttf|eot|svg)$ {
        expires 30d;
        access_log off;
        add_header Cache-Control "public, immutable";
    }

    # Optional: Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    location = /404.html {
        internal;
    }
    location = /50x.html {
        internal;
    }

    # Logging
    access_log /var/log/nginx/your_domain.com.access.log;
    error_log /var/log/nginx/your_domain.com.error.log;
}
